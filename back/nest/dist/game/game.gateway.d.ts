import { SchedulerRegistry } from '@nestjs/schedule';
import { OnGatewayConnection, OnGatewayDisconnect, OnGatewayInit } from '@nestjs/websockets';
import { Server, Socket, Namespace } from 'socket.io';
import { CreateHistoryDto } from 'src/history/dto/create-history.dto';
import { HistoryService } from 'src/history/history.service';
import { SocketWithAuth } from '../message/types_message';
import { GameService } from './game.service';
import { Position } from './types_game';
import { GameMode } from '@prisma/client';
import { UserService } from 'src/user/user.service';
import { SocketService } from 'src/socket/socket.service';
export declare class GameGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {
    private gameService;
    private historyService;
    private scheduleRegistry;
    private userService;
    private socketService;
    constructor(gameService: GameService, historyService: HistoryService, scheduleRegistry: SchedulerRegistry, userService: UserService, socketService: SocketService);
    io: Namespace;
    server: Server;
    afterInit(client: Socket): void;
    handleConnection(client: SocketWithAuth): void;
    handleDisconnect(client: SocketWithAuth): void;
    sync(): void;
    handshake(client: SocketWithAuth): Promise<void>;
    JoiningQueue(client: SocketWithAuth, mode: GameMode): Promise<void>;
    LeavingQueue(client: SocketWithAuth): Promise<void>;
    CreateLobby(client: SocketWithAuth): Promise<void>;
    LeavingLobby(client: SocketWithAuth): Promise<void>;
    ChangeLobbyMode(client: SocketWithAuth, mode: GameMode): Promise<void>;
    PlayerLobbbyReaddy(client: SocketWithAuth): Promise<void>;
    NewHistory(client: SocketWithAuth, history: CreateHistoryDto): Promise<void>;
    UpdatePlayerPosition(client: SocketWithAuth, position: number): Promise<void>;
    CreateGame(client: SocketWithAuth, mode: GameMode): Promise<void>;
    UpdateBallPosition(client: SocketWithAuth, position: Position): Promise<void>;
    StartGame(client: SocketWithAuth): Promise<void>;
    PlayerReady(client: SocketWithAuth): Promise<void>;
    UpdatePlayer(client: SocketWithAuth, paddleHeight: number, paddleWitdh: number, ballRadius: number, position: number): Promise<void>;
}
