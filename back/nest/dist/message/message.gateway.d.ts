import { OnGatewayConnection, OnGatewayDisconnect, OnGatewayInit } from '@nestjs/websockets';
import { UserPrivilege } from '@prisma/client';
import { Server, Socket, Namespace } from 'socket.io';
import { BlockService } from 'src/block/block.service';
import { CreateChannelDto, EditChannelDto } from 'src/channel/dto';
import { FriendService } from 'src/friend/friend.service';
import { GameGateway } from 'src/game/game.gateway';
import { GameService } from 'src/game/game.service';
import { SocketService } from 'src/socket/socket.service';
import { UserService } from 'src/user/user.service';
import { ChannelService } from '../channel/channel.service';
import { socketTab, SocketWithAuth } from './types_message';
export declare class MessageGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {
    private channelService;
    private friendService;
    private blockService;
    private userService;
    private gameGateWay;
    private gameService;
    private socketService;
    constructor(channelService: ChannelService, friendService: FriendService, blockService: BlockService, userService: UserService, gameGateWay: GameGateway, gameService: GameService, socketService: SocketService);
    SocketList: socketTab[];
    io: Namespace;
    server: Server;
    afterInit(client: Socket): void;
    handleConnection(client: SocketWithAuth): void;
    handleDisconnect(client: SocketWithAuth): void;
    handshake(client: SocketWithAuth): Promise<void>;
    CreateRoom(roomDto: CreateChannelDto, client: SocketWithAuth): Promise<void>;
    sendRoomMessage(roomId: string, message: string, client: SocketWithAuth): Promise<void>;
    joinRoom(name: string, password: string, client: SocketWithAuth): Promise<void>;
    LeaveRoom(roomId: string, client: SocketWithAuth): Promise<void>;
    UpdateUserPrivilege(roomId: string, privilege: UserPrivilege, time: Date, toModifie: string, client: SocketWithAuth): Promise<void>;
    BanUser(user: string, time: Date, client: SocketWithAuth): Promise<void>;
    addFriend(friend: string, client: SocketWithAuth): Promise<void>;
    addBlock(Block: string, client: SocketWithAuth): Promise<void>;
    RemoveFriend(remove: string, client: SocketWithAuth): Promise<void>;
    RemoveBlock(remove: string, client: SocketWithAuth): Promise<void>;
    UpdateRoom(roomId: string, dto: EditChannelDto, client: SocketWithAuth): Promise<void>;
    Dm(sendTo: string, client: SocketWithAuth): Promise<void>;
    InviteUser(user: string, channel: string, client: SocketWithAuth): Promise<void>;
    InviteUserInGame(inviteId: string, client: SocketWithAuth): Promise<void>;
    AccepteGameInvite(userid: string, client: SocketWithAuth): Promise<void>;
    WatchPartie(userId: string, client: SocketWithAuth): Promise<void>;
}
