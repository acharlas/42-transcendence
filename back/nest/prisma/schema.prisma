// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  hash  String

  username String @unique
  nickname String
  wins     Int     @default(0)
  losses   Int     @default(0)
  mmr Int @default(1000)

  Channels ChannelUser[]

  myfriend User[]   @relation("friends")
  arefriend  User[]  @relation("friends")
  
  myblock User[]   @relation("blocks")
  areblock  User[]  @relation("blocks")
  
  history UserHistory[]
  messages Message[]
  
  userType UserType

  fortyTwoId Int

  mfaEnabled      Boolean   @default(false)
  mfaPhoneNumber  String?

  @@map("users")
}

model ChannelUser {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  privilege UserPrivilege
  time  DateTime @default(now())
  status UserStatus

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@map("channelusers")
  @@id([userId, channelId])
}

model Channel {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String? @unique
  type ChannelType @default(public)
  hash String?

  users ChannelUser[]
  messages Message[]

  @@map("channels")
}

model UserHistory {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  placement Int
  yourScore Int

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  historyId String
  history History @relation(fields: [historyId], references: [id], onDelete: Cascade)
  @@map("userhistorys")
  @@id([userId, historyId])
}

model History {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mode GameMode
  user UserHistory[] 
}

model Message {
  id String @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String
  username String
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@map("messages")
  @@id([channelId, id])

}

enum GameMode {
  BATTLEROYAL
  CLASSIC
}

enum UserStatus {
  connected
  disconnected

}

enum UserPrivilege {
  owner
  admin
  default
  muted
  ban
}

enum UserType {
  fortyTwo
  normal
}

enum ChannelType {
  public
  private
  protected
  dm
}
